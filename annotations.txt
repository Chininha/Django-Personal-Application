django-admin: display subcommands
django-admin startproject <project_name> -> starts a project
python manage.py runserver 8000
--> manage.py: file that allows command line commands
python manage.py startapp <app_name>: creates a new app. Within a django project, it is possible to have multiple applications interacting with each other.
--> An app is a python package with a defined structure
python manage.py makemigrations : tells Django that changes were made in the models
python manage.py migrate: apply the migrations
python manage.py sqlmigrate blog 0001 -> shows the raw SQL that's running on the background of migrate.
python manage.py shell -> opens the interactive django shell to make queries

Queries within the shell:
-> User.objects.all()
-> User.objects.first()
-> User.objects.filter(username='x')
-> User.objects.filter(username='x').first()
-> user = User.objects.filter(username='x').first()
---> user.id / user.pk
-> user = User.objects.get(id=int)
-> post_1 = Post(author=user, content='O primeiro post do site') -> it is possible to acess the value in the field, by post_1.author, for example
---> It's possible to acess the author's email too. Like: post_1.author.email
-> user.post_set.all : shows the related rows between user and post
-> user.post_set.create(title='Mais um post de Guilherme', content='Estou sem ideia') create a post directly from the user object
-> user.profile.image | user.profile.image.width
-> Post 


--> post_1.save()> apply the insert
python manage.py createsuperuser: creates a admin user for the application.


Requisiton process:
1. Someone makes a request in the browser, to a specif URL.
2. Than Django searches for a URL pattern in the URLConf file of the project that matches the requisition , in a top to bottom flow.
3. When it found a correspondent, than it chops off the URL in the name of the app, and then send the remaining string to the URLConf of the app.
4. After that, it searches if some URL pattern in the URLConf of the app matches the remaining string.
5. If so, the view function is called and it returns, for example, a HTML document.

Important files:
-> views.py
-> templates (subdirectory): directory created inside the app folder. Django will look for templates inside it.
----> app_directory_name\templates\app_directory_name
* Django only looks for templates subdirectory inside apps that are definied in the "INSTALLED APPS" variable in the settings file of the project.
-> urls.py

Imporante concepts
-> Template Language; template inheritance

Django ORM: Object Relational Mapper
-> a layer between a database and a Object Oriented programming language

from django.core.paginator import Paginator 
>>> posts = ['1', '2', '3', '4', '5']        
>>> p = Paginator(posts, 2)
>>> p.num_pages
for page in p.page_range:
...     print(page)
p1 = p.page(1) - acessando a página
p1.number - retorna o número da página
p1.object_list -> Mostra os objetos da página
p1.has_previous() -> verifica se há páginas antes
p1.has_next() -> verifica se há páginas depois
p1.next_page_number() -> retorna o número da próxima página

